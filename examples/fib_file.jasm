# Example: Calculating the Fibonacci numbers and output them to a file
# Syscall details:
#   sys_write: rax=1, rdi=stdout, rsi=buffer, rdx=length.
#   sys_open:  rax=2, rdi=filename, rsi=flags.
#   sys_close: rax=3, rdi=file descriptor.
#   sys_exit:  rax=60, rdi=exit status.

# Open the file for writing
mov rax, 2          # sys_open
mov rdi, filename   # filename
mov rsi, 65         # O_WRONLY | O_CREAT
mov rdx, 0644       # File permissions (rw-r--r--)
call
mov [file_descriptor], rax  # Store the file descriptor

loop:
    # Convert current number to ASCII
    mov rax, [a]
    mov rbx, 48          # ASCII '0' is 48
    add rax, rbx         # Convert to ASCII digit
    mov [number_buf], rax

    # Write it to the file
    mov rax, 1          # sys_write
    mov rdi, [file_descriptor] # file descriptor (dereferenced)
    mov rsi, number_buf # buffer with number
    mov rdx, 1          # length (1 character)
    call

    # Print a space to separate numbers
    mov rax, 1          # sys_write
    mov rdi, [file_descriptor] # file descriptor (dereferenced)
    mov rsi, space      # space character
    mov rdx, 1          # length
    call

    # Calculate next Fibonacci number
    mov rax, [a]
    mov rbx, [b]
    add rax, rbx
    mov [c], rax
    mov rax, [b]
    mov [a], rax
    mov rax, [c]
    mov [b], rax

    # Compare with 10 (loop until we reach 10)
    mov rax, [a]
    mov rbx, 10
    cmp rax, rbx
    jmplt loop

# Close the file
mov rax, 3          # sys_close
mov rdi, [file_descriptor] # file descriptor (dereferenced)
call

# Exit program
mov rax, 60      # sys_exit
mov rdi, 0       # status 0
call

data a 0          # First Fibonacci number
data b 1          # Second Fibonacci number
data c 1          # Temporary variable
data max 10       # Maximum Fibonacci number to calculate
data number_buf size 16 # Buffer to save the number as ASCII
data space " "    # Space character
data filename "output.txt" # Output file name
data file_descriptor 0 # File descriptor