# Example: Open a file, read its contents, and echo it back to stdout
# Syscall details:
#   sys_open:  rax=2, rdi=filename, rsi=flags, rdx=mode
#   sys_read:  rax=0, rdi=file descriptor, rsi=buffer, rdx=length
#   sys_write: rax=1, rdi=stdout, rsi=buffer, rdx=length
#   sys_exit:  rax=60, rdi=exit status

# Open file "file.txt"
data file_name "data.txt"    # Allocate space for "file.txt" (8 chars + null terminator)
# (Assume file_name is pre-initialized with "file.txt")
mov rax, 2         # sys_open
mov rdi, file_name # pointer to file name
mov rsi, 0         # flags: read-only (0)
mov rdx, 0         # mode (not used for reading)
call

# Save file descriptor returned by sys_open
mov [fd], rax

# Read from file
mov rax, 0         # sys_read
mov rdi, [fd]      # file descriptor from sys_open
mov rsi, buffer    # buffer address
mov rdx, 1024      # maximum number of bytes to read
call

# Save number of bytes read
mov [bytes_read], rax

# Write the file contents to stdout
mov rax, 1         # sys_write
mov rdi, 1         # stdout file descriptor
mov rsi, buffer    # buffer address
mov rdx, [bytes_read]  # number of bytes to write
call

# Exit the program
mov rax, 60        # sys_exit
mov rdi, 0         # exit status 0
call

# Data declarations
data buffer size 1024
data bytes_read size 8
data fd size 8
data file_name size 9
